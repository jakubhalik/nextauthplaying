{"component_name": "Testq", "modifications": {"src/app\\layout.tsx": "import './globals.css'; export const metadata = { title: 'next auth play', description: 'next auth play', }\nexport default function RootLayout({ children }: { children: React.ReactNode }) { return <html lang=\"en\"><body>{children}</body></html> }", "src/app\\page.tsx": "import Link from 'next/link';\nexport default function App() { return <><h1>auth</h1><Link href=\"/register\">Register Page</Link><Link href=\"/login\">Login Page</Link></>; }", "src/app\\components\\AuthForm.tsx": "import { FormEvent, useState } from 'react'; import { useRouter } from 'next/navigation'; import { useFormState } from '../hooks/useFormState'; import ErrorComponent from '../components/ErrorComponent';\nimport TWLabel from '../TWcomponents/TWLabel'; import TWInput from '../TWcomponents/TWInput'; import TWSubmitButton from '../TWcomponents/TWSubmitButton'; import TWMt4 from '../TWcomponents/TWMt4';\nimport TWFlexJustifyCenterPy24_3xl56 from '../TWcomponents/TWFlexJustifyCenterPy24_3xl56'; import TWBorderRoundedmdP4sm14 from '../TWcomponents/TWBorderRoundedmdP4sm14'; import TWFlexJustifyCenterBoldText2xlsm3xlMb6 from '../TWcomponents/TWFlexJustifyCenterBoldText2xlsm3xlMb6';\ntype AuthFormProps = { title: string, buttonText: string, actionCallback: (data: {[key: string]: string}) => Promise<any>, push: string }\nexport const AuthForm: React.FC<AuthFormProps> = ({ title, buttonText, actionCallback, push}) => { \n    const [data, handleChange] = useFormState({ name: '', email: '', password: '' }); const [error, setError] = useState<string | null>(null); const router = useRouter();\n    const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {\n        e.preventDefault(); \n        try { const result = await actionCallback(data); if (result?.error) { setError(result.error); } else { router.push(push); } } catch (err) { setError(err instanceof Error ? err.message : 'An error occurred'); }\n    };\n    return <>\n        {error && <ErrorComponent message={error} onClose={() => setError(null)} />}\n        <TWFlexJustifyCenterPy24_3xl56><TWBorderRoundedmdP4sm14>\n            <h1 className=\"x q w\">testiiing</h1>\n            <TWFlexJustifyCenterBoldText2xlsm3xlMb6>{title}</TWFlexJustifyCenterBoldText2xlsm3xlMb6>\n            <form onSubmit={handleSubmit}>\n                {Object.keys(data).map(key => { \n                    const inputKey = key as keyof typeof data; \n                    return <div key={inputKey}>\n                        <TWLabel forName={inputKey} isName={inputKey === 'name'}>{inputKey.charAt(0).toUpperCase() + inputKey.slice(1)}</TWLabel>\n                        <TWInput id={inputKey} type={inputKey} name={inputKey} value={data[inputKey]} onChange={handleChange} />\n                    </div>;\n                })}\n                <TWMt4><TWSubmitButton>{buttonText}</TWSubmitButton></TWMt4>\n            </form>\n        </TWBorderRoundedmdP4sm14></TWFlexJustifyCenterPy24_3xl56>\n    </>;\n}", "src/app\\components\\ErrorComponent.tsx": "type ErrorProps = { message: string, onClose?: () => void }\nconst ErrorComponent: React.FC<ErrorProps> = ({ message, onClose }) => \n    { return <div className=\"bg-red-100 border border-red-400 text-red-700 px-8 sm:px-4 py-3 text-lg sm:text-2xl rounded fixed w-full text-center\" role=\"alert\">\n        {message}\n        <button onClick={onClose}>\n                <span className=\"absolute top-0 bottom-0 right-0 px-4 py-3\">\n                    <svg className=\"fill-current h-8 w-8 text-red-500\" role=\"button\" aria-label=\"Close error message\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\"><title>Close</title><path d=\"M14.348 14.849a1.2 1.2 0 0 1-1.697 0L10 11.819l-2.651 3.029a1.2 1.2 0 1 1-1.697-1.697l2.758-3.15-2.759-3.152a1.2 1.2 0 1 1 1.697-1.697L10 8.183l2.651-3.031a1.2 1.2 0 1 1 1.697 1.697l-2.758 3.152 2.758 3.15a1.2 1.2 0 0 1 0 1.698z\"/></svg>\n                </span>\n            </button>\n    </div> } \nexport default ErrorComponent;", "src/app\\dashboard\\page.tsx": "export default function DashboardPage() { return <div>dashboard</div>; }", "src/app\\hooks\\useFormState.tsx": "import { useState, ChangeEvent } from 'react';\nexport const useFormState = (initialData: {name: string, email: string, password: string}) => {\n    const [data, setData] = useState(initialData); \n    const handleChange = (e: ChangeEvent<HTMLInputElement>) => { setData({ ...data, [e.target.name]: e.target.value }); }; return [data, handleChange] as const;\n}", "src/app\\login\\page.tsx": "'use client';\nimport { signIn } from 'next-auth/react'; import { AuthForm } from '../components/AuthForm';\nexport default function LoginPage() {\n    const loginCallback = async (data: { [key: string]: string }) => { return await signIn('credentials', { ...data, redirect: false }); }\n    return <AuthForm title=\"Sign in to your account\" buttonText=\"Sign in\" actionCallback={loginCallback} push=\"/dashboard\" />\n}", "src/app\\register\\page.tsx": "'use client';\nimport { AuthForm } from '../components/AuthForm';\nexport default function RegisterPage() { \n    const registerCallback = async (data: { [key: string]: string }) => { \n        const response = await fetch('/api/register', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(data) }); const result = await response.json(); \n        if (!response.ok) { throw new Error(result.message || 'Registration failed'); } return result;\n    }\n    return <AuthForm title=\"Register an account\" buttonText=\"Register\" actionCallback={registerCallback} push=\"/login\" />\n}", "src/app\\TWcomponents\\Test.tsx": "interface TestProps { children: React.ReactNode }\nconst Test: React.FC<TestProps> = ({ children }) => \n    <div className=\"x q\">{children}</div>;\nexport default Test;\n", "src/app\\TWcomponents\\TWBorderRoundedmdP4sm14.tsx": "interface TWBorderRoundedmdP4sm14Props { children: React.ReactNode }\nconst TWBorderRoundedmdP4sm14: React.FC<TWBorderRoundedmdP4sm14Props> = ({ children }) => <div className=\"border rounded-md p-4 sm:p-14\">{children}</div>; \nexport default TWBorderRoundedmdP4sm14;", "src/app\\TWcomponents\\TWFlexJustifyCenterBoldText2xlsm3xlMb6.tsx": "interface TWFlexJustifyCenterBoldText2xlsm3xlMb6Props { children: React.ReactNode }\nconst TWFlexJustifyCenterBoldText2xlsm3xlMb6: React.FC<TWFlexJustifyCenterBoldText2xlsm3xlMb6Props> = ({ children }) => \n    <div className=\"text-center text-2xl sm:text-3xl font-bold text-gray-900 mb-6\">{children}</div>; \nexport default TWFlexJustifyCenterBoldText2xlsm3xlMb6;", "src/app\\TWcomponents\\TWFlexJustifyCenterPy24_3xl56.tsx": "interface TWFlexJustifyCenterPy24_3xl56Props { children: React.ReactNode }\nconst TWFlexJustifyCenterPy24_3xl56: React.FC<TWFlexJustifyCenterPy24_3xl56Props> = ({ children }) => <div className=\"flex justify-center py-24 3xl:py-56\">{children}</div>; \nexport default TWFlexJustifyCenterPy24_3xl56;", "src/app\\TWcomponents\\TWInput.tsx": "import { ChangeEvent } from 'react';\ntype TWInputProps = { id: string, type: string, name: string, value: string, onChange: (e: ChangeEvent<HTMLInputElement>) => void }\nconst TWInput: React.FC<TWInputProps> = ({ id, type, name, value, onChange }) =>\n    <input id={id} type={type} name={name} required value={value} onChange={onChange} className=\"mt-2 block w-full rounded-md p-2 border text-gray-900 shadow-sm ring-1 ring-inset \n    ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-md\" />;\nexport default TWInput;", "src/app\\TWcomponents\\TWLabel.tsx": "type TWLabelProps = { forName: string, isName?: boolean, children: React.ReactNode }\nconst TWLabel: React.FC<TWLabelProps> = ({ forName, isName, children }) => \n    <label htmlFor={forName} className={`block text-lg font-medium text-gray-900 ${!isName ? \"mt-3 sm:mt-4\" : \"\"}`}>{children}</label>;\nexport default TWLabel;", "src/app\\TWcomponents\\TWMt4.tsx": "interface TWMt4Props { children: React.ReactNode } \nconst TWMt4: React.FC<TWMt4Props> = ({ children }) => <div className=\"mt-4\">{children}</div>; \nexport default TWMt4;", "src/app\\TWcomponents\\TWSubmitButton.tsx": "type TWSubmitButtonProps = { children: React.ReactNode }\nconst TWSubmitButton: React.FC<TWSubmitButtonProps> = ({ children }) => \n    <button type=\"submit\" className=\"flex w-full justify-center rounded-md bg-sky-500 p-2 text-white text-xl sm:text-2xl font-bold border-0 shadow-sm hover:bg-sky-400 active:bg-sky-300\">\n        {children}\n    </button>;\nexport default TWSubmitButton;"}}